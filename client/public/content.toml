
########################################
# LANDING
########################################
[landing]
id = "landing"
title = "Welcome"
avatar = "img/avatar.jpg"
body = """
My name's Jamie, and I'm a developer of things. While my experience generally lies in desktop applications and backend web development, I really just like exploiting a computer's ability to do things for me.

In the past, I've focused on games and game engines. Arguably my biggest driving force for getting into programming was my interest in creating a Minecraft clone (one with much better water physics).

At present, my interest leans more towards "useful" applications: programs that serve to make my life easier. As a Linux user, it's time to take advantage of that flexibility!

In the future, I'll probably continue making "useful" applications, but with a focus on IoT integration. I would also love to play around with neural networks and deep learning algorithms.
"""
[[landing.links]]
title = "Projects"
description = "Check out some of my recent projects."
targetId = "projects"
[[landing.links]]
title = "Github"
description = "Browse all of my public projects."
url = "https://github.com/jamiesyme"
[[landing.links]]
title = "Contact"
description = "Let's talk."
targetId = "contact"


########################################
# PROJECTS
########################################
[projects]
id = "projects"
title = "Projects"

[projects.0]
id = "videoso"
details = """
I started the project as a means to experiment with Go, as well as to learn more about video processing and video streaming. After a little over a week of development, those aspects of the project had essentially been satisfied; you could visit [Videoso.ca](http://videoso.ca), upload a new video (which would get processed with FFmpeg/MP4Box), and then finally view/stream that video.

So what next? Well, I'm now working on expanding the platform to be a little more feature-complete, working on things like:
+ users;
+ video search;
+ tag-based subscriptions;
+ and improved video processing performance.

I'm also hoping to improve the design of the web client, as well as add support for additional video input formats, but those are both secondary goals.
"""
stack = ["Go",
         "Postgres",
	 "Nginx",
	 "DigitalOcean",
	 "Amazon S3"]
screenshots = ["img/videoso-screen-1.png"]
summary = """
Videoso is an early prototype of a video sharing platform. It's goal is to allow users to upload and share videos, much like YouTube, but with a tweaked subscription system (not yet implemented).
"""
title = "Videoso"
when = "Jul '17 - Present"
[[projects.0.where]]
text = "Videoso.ca"
url = "http://videoso.ca"
[[projects.0.where]]
text = "Github"
url = "https://github.com/jamiesyme/videoso"

[projects.1]
id = "lattice"
details = """
I developed Lattice because I was tired of my default, ugly status bar sitting at the bottom of my desktop. I tried customizing it, but it just never felt like it belonged. I tried Conky as well, which was a lot more flexible, but it still didn't behave how I wanted. So, I decided to write something custom.

My old status bar was always visible and always consuming space, but I only ever needed it periodically. Lattice, on the other hand, is hidden about 95% of the time, which means all of my apps can run fullscreen without any distractions. When I need to see the time or some other info, I can press a key (configured in my i3 configuration file) to toggle the window on or off.

To achieve this, I split Lattice into two separate apps: the server (lattice) and the client (lattice-msg). The server is launched on startup, and then the client can be used either from a terminal, or it can be bound to keys in your window manager configuration. The IPC is done over a TCP socket; I could change this to a UNIX domain socket, but TCP works fine for now.

The code was split into a few different components:
+ Surface - wraps all of the Xlib functionality
+ Radio - wraps all of the socket functionality
+ Hub - manages modules and any drawing that's done, as well as manages the Surface
+ Module - a unit of info to be rendered (examples: time module, audio module, etc.)

The goal behind the design of the code was to make it as easy as possible to implement new types of modules. As an example, here are the [header](https://github.com/jamiesyme/lattice/blob/master/src/audio-module.h) and [source](https://github.com/jamiesyme/lattice/blob/master/src/audio-module.c) files for the audio module. The header contains a single function declaration, and the source file is a little over 100 lines long. While LoC isn't the best metric for complexity, it gives a rough idea.
"""
stack = ["C",
         "Xlib",
         "Cairo/Pango",
         "Make"]
screenshots = ["img/lattice-screen-1.png",
               ]#"img/lattice-screen-2.jpg"]
summary = """
Lattice is a lightweight status hub for the X Window System on Linux. It's goal is to provide easy access to basic info like the time and date, while remaining as unintrusive as possible."""
title = "Lattice"
when = "Jan '17 - Present"
[[projects.1.where]]
text = "Github"
url = "https://github.com/jamiesyme/lattice"

[projects.2]
id = "portfolio"
details = """
There is no one particular part of this project that stands out as being exceptional, nor is there any area that was exceptionally difficult to implement. The real challenge for me during this project was learning React, and then using it to put together a website in time for sending out applications. I'll have to wait before I can tell whether I achieved that goal or not.

One interesting aspect of this project was the use of Atomic Design. Google is your friend here, but the general idea is that you categorize your components by simplicity:
+ Atoms are dumb
+ Molecules are also dumb, but they're composed of multiple atoms and other molecules
+ Organisms are dynamic, and they're composed from atoms, molecules, and other organisms
+ Ecosystems are considered sections of the page
+ Environments are where all of the data is controlled from 
After using this structure for my portfolio, I would say it's not very useful for smaller projects; I spent a lot of time fussing over minor details like finding the line between what classifies as an organism and a molecule (definitions which I still haven't completely worked out). I think Atomic Design would be a lot more useful on medium/large projects, and I plan on trying it out again sometime in the future.

As for the deployment details, I chose Hover for my domain provider, DigitalOcean for my server hosting, and PM2 for managing the server application. All of these are tools that I haven't used before, but they've all worked out exceptionally well. I also set up the free version of Cloudflare in front of my server for some extra protection, SSL, and CDN capabilities. Finally, I used Nginx to redirect web requests to node, and used ufw as a firewall to block any unwanted traffic.

This project is still in progress. I want to make it less content-heavy (I feel like things are more wordy than necessary), add some more color to the design, and make it mobile-friendly. Cleaning up the code and patching some of the hacks are definitely on the list as well. Besides that, I'll just be updating my resume and the projects as time goes on.
"""
stack = ["JavaScript",
         "React",
         "Node.js",
         "Yarn",
         "Babel",
         "PM2",
         "Nginx",
         "Cloudflare"]
screenshots = ["img/portfolio-screen-1.png",
               "img/portfolio-screen-2.png"]
summary = """
[jamiesyme.com](https://jamiesyme.com) is my online portfolio. It's goal is to showcase my recent work, to tell employers a little about who I am, and to provide a means of contact."""
title = "jamiesyme.com"
when = "Feb '17 - Present"
[[projects.2.where]]
text = "jamiesyme.com"
url = "https://jamiesyme.com"
[[projects.2.where]]
text = "Github"
url = "https://github.com/jamiesyme/portfolio"

[projects.3]
id = "jdoom"
details = """
Inspiration for this rendering engine came from the [original Doom game](https://en.wikipedia.org/wiki/Doom_%281993_video_game%29), which used a similar technique to render 3D graphics on far less powerful hardware. The final result, however, is more analogous to [Wolfenstein 3D](https://en.wikipedia.org/wiki/Wolfenstein_3D). 

My intention of this project wasn't to create a super efficient rendering engine to be used in actual games, but rather to explore how you could render a 3D environment without rasterization or ray tracing. As a result, I discovered that the technique is actually quite similar to ray tracing, though 3D graphics enthusiasts would explicitly classify it as ray casting.

Features:
+ All rendering done through direct pixel manipulation
+ First-person navigation using keyboard controls
+ Level defined as 2D array of tiles
+ Texture-mapping based on tile-type
+ Reflection with varying opacity
+ You can see yourself in the mirror!

In the end, I was left with a pure JavaScript implementation capable of running at a decent framerate on modern hardware. I quenched my thirst of wanting to learn how games ran before rasterization/GPUs blew up. If I were to do this project again (which I likely will in the future), I would love to play around with floor and ceiling heights, as well as lighting effects.
"""
stack = ["JavaScript"]
screenshots = ["img/jdoom-screen-1.png",
               "img/jdoom-screen-2.png",
               ]#"img/jdoom-screen-3.jpg"]
summary = """
JDoom is a 3D ray casting rendering demo. It uses the player's horizontal position and rotation within a 2D grid of walls to simulate a 3D environment."""
title = "JDoom"
when = "Oct '15 - Nov '15"
[[projects.3.where]]
text = "Github"
url = "https://github.com/jamiesyme/JDoom"


########################################
# ABOUT
########################################
[about]
id = "about"
title = "About"
body = """
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sapien nunc, ultricies eget turpis sed, dapibus tempus libero. Vestibulum in sem velit. Donec sed urna quis tellus rhoncus imperdiet. Integer interdum pretium purus at molestie. Cras et nibh quis mauris scelerisque mollis quis quis risus. Curabitur porta, nulla sed molestie volutpat, nisi arcu varius ipsum, semper ullamcorper ipsum libero vel leo. Mauris sit amet condimentum mauris. Etiam ut sapien ut urna ultricies ultrices.

Duis eget imperdiet lorem. Nullam a tortor lacinia, maximus sapien finibus, lobortis mauris. Vivamus efficitur tincidunt mi ac lacinia. Nulla convallis, neque eu pharetra consectetur, purus nisl rhoncus quam, vel interdum risus nisi vitae leo. Etiam a dui nec orci finibus viverra sit amet in urna. Donec dapibus ligula felis, vel posuere arcu ultricies eu. In fermentum aliquet cursus. Maecenas consequat mauris nec velit molestie elementum. Aliquam sodales enim pharetra quam tincidunt condimentum id vitae enim.

Aliquam at nunc venenatis, aliquam nisl at, dictum lorem. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Donec ante justo, pulvinar nec faucibus a, porta eu sapien. Mauris consectetur vehicula ipsum, nec rutrum ligula fermentum vel. Morbi risus dui, elementum ut feugiat sit amet, suscipit sit amet nulla. Vestibulum eu tincidunt sapien, vitae lobortis felis.
"""


########################################
# CONTACT
########################################
[contact]
id = "contact"
title = "Contact"
body = """
You can contact me at [jamie@jamiesyme.com](mailto:jamie@jamiesyme.com).

Alternatively, feel free to use the contact form below.
"""